namespace Portfolio.Domain.Abstractions;


/// <summary>
/// Represents a contract for domain entities.
/// </summary>
/// <remarks>
/// This interface outlines the essential responsibilities of domain entities.
/// It includes mechanisms for managing and clearing domain events.
/// </remarks>
public interface IEntity
{
    /// <summary>
    /// Retrieves the collection of domain events associated with this entity.
    /// </summary>
    /// <returns>
    /// A read-only list of <see cref="IDomainEvent"/> instances that capture
    /// notable changes or events in the entity's lifecycle.
    /// </returns>
    /// <remarks>
    /// This method allows access to domain events generated by the entity.
    /// These events are instrumental in propagating state changes or key actions
    /// across the domain in an event-driven architecture.
    /// </remarks>
    IReadOnlyList<IDomainEvent> GetDomainEvents();

    /// <summary>
    /// Clears all domain events associated with this entity.
    /// </summary>
    /// <remarks>
    /// This method empties the collection of domain events generated by the entity.
    /// It is typically called after the events have been processed or dispatched
    /// to ensure the entity's state remains consistent and uncluttered.
    /// </remarks>
    void ClearDomainEvents();
}

