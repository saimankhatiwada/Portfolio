using MediatR;
using Microsoft.Extensions.Logging;
using Portfolio.Application.Abstractions.Caching;
using Portfolio.Domain.Abstractions;

namespace Portfolio.Application.Abstractions.Behaviors;

/// <summary>
/// Implements caching behavior for MediatR queries, ensuring that results of queries implementing <see cref="ICachedQuery"/> 
/// are cached and retrieved efficiently.
/// </summary>
/// <typeparam name="TRequest">The type of the query request, which must implement <see cref="ICachedQuery"/>.</typeparam>
/// <typeparam name="TResponse">The type of the query response, which must inherit from <see cref="Result"/>.</typeparam>
/// <remarks>
/// This behavior checks the cache for a stored result before executing the query. If a cached result is found, it is returned immediately.
/// Otherwise, the query is executed, and the result is cached if it is successful.
/// </remarks>
internal sealed class QueryCachingBehavior<TRequest, TResponse> : 
    IPipelineBehavior<TRequest, TResponse> 
    where TRequest : ICachedQuery 
    where TResponse : Result
{
    private readonly ICacheService _cacheService;
    private readonly ILogger<QueryCachingBehavior<TRequest, TResponse>> _logger;

    public QueryCachingBehavior(ICacheService cacheService, ILogger<QueryCachingBehavior<TRequest, TResponse>> logger)
    {
        _cacheService = cacheService;
        _logger = logger;
    }

    /// <summary>
    /// Handles the caching behavior for a MediatR query request.
    /// </summary>
    /// <param name="request">The query request, which must implement <see cref="ICachedQuery"/>.</param>
    /// <param name="next">
    /// The delegate representing the next action in the pipeline. It is invoked to process the query if no cached result is found.
    /// </param>
    /// <param name="cancellationToken">A token to monitor for cancellation requests.</param>
    /// <returns>
    /// A task that represents the asynchronous operation. The task result contains the query response, either retrieved from the cache
    /// or generated by executing the query.
    /// </returns>
    /// <remarks>
    /// This method first attempts to retrieve the query result from the cache using the cache key provided by the request.
    /// If a cached result is found, it is returned immediately. If not, the query is executed, and the result is cached if it is successful.
    /// </remarks>
    public async Task<TResponse> Handle(TRequest request, RequestHandlerDelegate<TResponse> next, CancellationToken cancellationToken)
    {
        TResponse? cachedResult = await _cacheService.GetAsync<TResponse>(request.CacheKey, cancellationToken);

        string name = typeof(TRequest).Name;

        if (cachedResult is not null)
        {
            _logger.LogInformation("Cache hit for {Query}", name);

            return cachedResult;
        }

        _logger.LogInformation("Cache miss for {Query}", name);

        TResponse result = await next();

        if (result.IsSuccess)
        {
            await _cacheService.SetAsync(request.CacheKey, result, request.Expiration, cancellationToken);
        }

        return result;
    }
}
